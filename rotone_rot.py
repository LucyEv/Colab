Automatically generated by Colaboratory.

# return liitle 'a' if lowcase 
# return big 'A' if uppercase
# return same otherwise
def transform(letter):
  if (letter >= 'a' and letter <= 'z'):
    return 'a'
  if (letter >= 'A' and letter <= 'Z'):
    return 'A'
  return letter

print(transform('B'))
print(transform('h'))
print(transform('1'))
print(transform('!'))

# function apply_transform(string1,func)
# goes through each letter of the string and applies function "func" to each letter

def transform(letter,k):
  if (letter>='a' and letter <='z'):
    assci_of_first_letter=ord('a')
  elif (letter>='A' and letter <='Z'):
    assci_of_first_letter=ord('A')
  else:
    return (letter)
  number=ord(letter)-assci_of_first_letter
  new_number=(number+k)%26
  new_letter=chr(new_number+assci_of_first_letter)
  return new_letter

def apply_transform(string1,func,k):
  i=0
  l=len(string1)
  while(i<l):
    current_letter=string1[i]
    transformed_letter= func(current_letter,k)
    print(transformed_letter,end='')
    i+=1

#add function as parameter
apply_transform("Les stagiaires du staff ne sentent pas toujours tres bon",transform,1)

def plus(x):
  return x+1

def apply_fun(y,func):
  return( func(y))

print(apply_fun(0,plus))

print((24+2)%26)
print((23+2)%26)
print((25+2)%26)

def transform2(letter,k):
  if (letter>='a' and letter <='z'):
    assci_of_first_letter=ord('a')
  elif (letter>='A' and letter <='Z'):
    assci_of_first_letter=ord('A')
  else:
    return (letter)
  number=ord(letter)-assci_of_first_letter
  new_number=(number+k)%26
  new_letter=chr(new_number+assci_of_first_letter)
  return new_letter
  
print(transform2('Z',3))
print(transform2('a',2))
print(transform2('z',2))
print(transform2('b',2))

letter='a'

print(letter)
number=ord(letter)
print(number)
new_letter=chr(number+1)
print(new_letter)
